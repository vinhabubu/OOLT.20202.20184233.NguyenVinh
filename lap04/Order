public class Order {
    public static final int MAX_NUMBERS_ORDER = 15;
    public static final int MAX_LIMITED_ORDERS = 8;
    public static int nbOrders = 0;
    private int qtyOrdered;
    MyDate dateOrdered;

    private DigitalVideoDisc itemOrdered[] = new DigitalVideoDisc[MAX_NUMBERS_ORDER];

    public Order(){
        if( nbOrders < MAX_LIMITED_ORDERS)
        {
            nbOrders += 1;
            dateOrdered = new MyDate();
        }
        else
        {
            System.out.println("Number of orders is max!");
        }
    }

    public int getQtyOrdered() {
        return qtyOrdered;
    }

    public void setQtyOrdered(int qtyOrdered) {
        this.qtyOrdered = qtyOrdered;
    }

    public String getDateOrdered(){
        return dateOrdered.getDay() + "-" + dateOrdered.getMonth() + "-" + dateOrdered.getYear();
    }

    public void addDigitalVideoDisc(DigitalVideoDisc disc){
        if (qtyOrdered == MAX_NUMBERS_ORDER)
        {
            System.out.println("The Order is full!");
        }
        else
        {
            itemOrdered[qtyOrdered] = disc;
            qtyOrdered++;
            System.out.println("Success!");
        }
    }

    public void addDigitalVideoDisc(DigitalVideoDisc [] dvdList)
    {
        if(qtyOrdered + dvdList.length > MAX_NUMBERS_ORDER)
        {
            System.out.println("Full!");
        }
        else
        {
            for(int i = 0; i < dvdList.length ; i++)
            {
                this.addDigitalVideoDisc(dvdList[i]);
            }
        }
    }

    public void addDigitalVideoDisc(DigitalVideoDisc dvd1, DigitalVideoDisc dvd2 )
    {   
        if(this.qtyOrdered + 2 <= MAX_NUMBERS_ORDER)
        {
            this.addDigitalVideoDisc(dvd1);
            this.addDigitalVideoDisc(dvd2);
        }
    }

    public void removeDigitalVideoDisc(DigitalVideoDisc disc) {
        if(qtyOrdered <= 0)
        {
            System.out.println("The shoping cart is emty!");
        }
        else
        {   
            for(int i = 0 ; i < qtyOrdered -1 ; i++)
            {   
                if(itemOrdered[i] == disc )
                {
                    for ( int j = i ; j < qtyOrdered - 1 ; j++)
                    itemOrdered[j] = itemOrdered[j+1] ;
                }      
            }
            qtyOrdered--;   
            System.out.println("Delete sucessfully !");
        }
    }

    public float totalCost() {
        float totalCost = 0.0f;
        for ( int i = 0 ; i < qtyOrdered ; i++)
        {
            totalCost += itemOrdered[i].getCost();
        }
        return totalCost;
    }

    public void print(){
        System.out.println("**********Order*************");
        System.out.println("Date : " + getDateOrdered());
        System.out.println("Ordered items :");
        for ( int i = 0 ; i < qtyOrdered ; i++)
        {
            System.out.println((i+1) + " DVD - " + itemOrdered[i].getTitle() + " - " + itemOrdered[i].getCategory()
                                + " - " + itemOrdered[i].getDirector() + " - " + itemOrdered[i].getLength() + " - " + itemOrdered[i].getCost());

        }
        System.out.println("Total cost : " + totalCost());
        System.out.println("*********");
    }
    }
